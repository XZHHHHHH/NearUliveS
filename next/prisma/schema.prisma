generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int            @id @default(autoincrement())
  email             String         @unique
  password          String
  Comment           Comment[]
  conversations1    Conversation[] @relation("ConversationUser1")
  conversations2    Conversation[] @relation("ConversationUser2")
  Like              Like[]
  messagesReceived  Message[]      @relation("ReceivedMessages")
  messagesSent      Message[]      @relation("SendMessages")
  sentNotifications Notification[] @relation("NotificationFrom")
  notifications     Notification[]
  posts             Post[]         @relation("UserPosts")
  profile           UserProfile?
}

model Post {
  id        Int       @id @default(autoincrement())
  title     String
  content   String
  createdAt DateTime  @default(now())
  authorId  Int
  imageUrl  String?
  Comment   Comment[]
  Like      Like[]
  author    User      @relation("UserPosts", fields: [authorId], references: [id])
}

model UserProfile {
  id           Int      @id @default(autoincrement())
  bio          String?
  profileImage String?
  createdAt    DateTime @default(now())
  userid       Int      @unique
  username     String?
  user         User     @relation(fields: [userid], references: [id])
}

model Conversation {
  id        Int       @id @default(autoincrement())
  user1Id   Int
  user2Id   Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user1     User      @relation("ConversationUser1", fields: [user1Id], references: [id])
  user2     User      @relation("ConversationUser2", fields: [user2Id], references: [id])
  messages  Message[]
}

model Message {
  id             Int          @id @default(autoincrement())
  conversationId Int
  senderId       Int
  receiverId     Int
  content        String
  createdAt      DateTime     @default(now())
  seen           Boolean      @default(false)
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  receiver       User         @relation("ReceivedMessages", fields: [receiverId], references: [id])
  sender         User         @relation("SendMessages", fields: [senderId], references: [id])
}

model Comment {
  id        Int      @id @default(autoincrement())
  postId    Int
  authorId  Int?
  content   String
  createdAt DateTime @default(now())
  author    User?    @relation(fields: [authorId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
}

model Like {
  id        Int      @id @default(autoincrement())
  postId    Int
  userId    Int
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([postId, userId])
}

model Notification {
  id         Int      @id @default(autoincrement())
  userId     Int
  type       String
  postId     Int?
  fromUserId Int
  read       Boolean  @default(false)
  createdAt  DateTime @default(now())
  fromUser   User     @relation("NotificationFrom", fields: [fromUserId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}
